# -*- coding: utf-8 -*-
"""PropuestaConcursoAPP.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IJ5Oh3fXAhNWqbS4FcdPs6Lv9rAu2WXa
"""

# Proyecto: ¬øQu√© tipo de inversor eres?
# Desarrollado por: Alejandro Ca√±as, Emmanuel Garc√≠a, Maricielo G√≥mez
# Descripci√≥n: App que determina el perfil del inversor y analiza acciones con Python.

#pip install streamlit yfinance

import streamlit as st
import pandas as pd
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
import datetime

# Initialize session state for 'perfil' at the beginning of the script
if 'perfil' not in st.session_state:
    st.session_state.perfil = None

tab1, tab2, tab3 = st.tabs(["üë§ Perfil del Inversor", "üìà Simulaci√≥n de Portafolio", "üìö Referencias"])

with tab1:

    st.title("üí∏ ¬øQu√© tipo de inversor eres?")
    st.write("")
    st.title("‚ú® Tu estilo, tu riesgo, tu inversi√≥n.")
    st.markdown("""
    Esta app te ayuda a identificar tu *perfil de inversor* y analizar el comportamiento de acciones reales.""")
    st.markdown("Elige tus preferencias y descubre c√≥mo se ajustan a los distintos tipos de portafolio.")
    st.markdown("*Desarrollado por: Alejandro Ca√±as, Emmanuel Garc√≠a, Maricielo G√≥mez*")

    # üß≠ CUESTIONARIO DE PERFIL
    st.title("üß© Cuestionario del inversor")
    st.header("üë§ Descubre tu perfil de inversor")
    st.markdown("Responde las siguientes preguntas para determinar tu tolerancia al riesgo, horizonte y conocimiento.")
    st.markdown("---")

    puntaje_total = 0

    st.header("I. Tolerancia al riesgo (Tu Reacci√≥n a la volatilidad)")

    # Pregunta 1: Reacci√≥n a la P√©rdida
    q1 = st.radio(
        "1. Si su portafolio cayera un 20% en un mes, usted...",
        ('A) Vender√≠a inmediatamente, no tolero m√°s p√©rdidas. (1 punto)',
        'B) Mantendr√≠a la inversi√≥n, esperando la recuperaci√≥n. (3 puntos)',
        'C) Invertir√≠a m√°s para aprovechar los precios bajos. (5 puntos)'),
        index=None  # Sin selecci√≥n por defecto
    )
    if q1:
        puntaje_total += int(q1.split('(')[-1].split()[0])

    # Pregunta 2: Prioridad de inversi√≥n
    q2 = st.radio(
    "2. ¬øQu√© es m√°s importante para usted?",
    ('A) Preservar el capital y obtener un retorno bajo pero seguro. (1 punto)',
    'B) Equilibrio entre crecimiento y seguridad. (3 puntos)',
    'C) M√°ximo rendimiento, aceptando un riesgo significativo. (5 puntos)'),
    index=None
    )
    if q2:
        puntaje_total += int(q2.split('(')[-1].split()[0])

    # Pregunta 3: Volatilidad Aceptable
    q3 = st.radio(
        "3. ¬øQu√© porcentaje de ca√≠da est√° dispuesto a aceptar en su capital en un a√±o?",
        ('A) Menos del 5%. (1 punto)',
        'B) Entre 10% y 20%. (3 puntos)',
        'C) M√°s del 25%. (5 puntos)'),
        index=None
    )
    if q3:
        puntaje_total += int(q3.split('(')[-1].split()[0])

    st.markdown("---")

    # --- SECCI√ìN II: HORIZONTE DE INVERSI√ìN (2 Preguntas) ---
    st.header("II. Horizonte de Inversi√≥n (Plazo)")

    # Pregunta 4: Mayor Objetivo
    q4 = st.radio(
    "4. ¬øPara qu√© objetivo principal est√° destinando este dinero?",
    ('A) Necesidades a corto plazo (1-3 a√±os). (1 punto)',
    'B) Mediano plazo (3-7 a√±os). (3 puntos)',
    'C) Largo plazo/Jubilaci√≥n (m√°s de 7 a√±os). (5 puntos)'),
    index=None
    )
    if q4:
        puntaje_total += int(q4.split('(')[-1].split()[0])

    # Pregunta 5: Momento de Retiro
    q5 = st.radio(
    "5. ¬øEn cu√°ntos a√±os planea retirar la mayor parte de este capital?",
    ('A) Menos de 2 a√±os. (1 punto)',
    'B) 5 a 10 a√±os. (3 puntos)',
    'C) M√°s de 15 a√±os. (5 puntos)'),
    index=None
    )
    if q5:
        puntaje_total += int(q5.split('(')[-1].split()[0])

    st.markdown("---")

    # --- SECCI√ìN III: CONOCIMIENTO Y EXPERIENCIA (2 Preguntas) ---
    st.header("III. Conocimiento y Experiencia")

    # Pregunta 6: Familiaridad con M√©tricas
    q6 = st.radio(
    "6. ¬øQu√© tan familiarizado est√° con el Ratio de Sharpe o el Modelo CAPM?",
    ('A) Nada familiarizado. (1 punto)',
    'B) Entiendo los conceptos b√°sicos. (3 puntos)',
    'C) Los uso frecuentemente en mi an√°lisis. (5 puntos)'),
    index=None
    )
    if q6:
        puntaje_total += int(q6.split('(')[-1].split()[0])

    # Pregunta 7: Experiencia con Instrumentos
    q7 = st.radio(
    "7. ¬øEn qu√© tipos de activos ha invertido o analizado con frecuencia?",
    ('A) Solo Cuentas de Ahorro, Dep√≥sitos (CDTs) y Fondos de inversi√≥n colectiva. (1 punto)',
      'B) Acciones individuales (AAPL, MSFT) y Bonos. Entiendo la diversificaci√≥n. (3 puntos)',
      'C) Futuros, Opciones, Criptomonedas, o he usado Apalancamiento/Venta en Corto. (5 puntos)'),
    index=None
    )
    if q7:
        puntaje_total += int(q7.split('(')[-1].split()[0])

    st.markdown("---")

# --- BOT√ìN Y C√ÅLCULO FINAL ---

    # Se verifica que todas las preguntas hayan sido respondidas antes de permitir el c√°lculo
    preguntas_respondidas = all([q1, q2, q3, q4, q5, q6, q7])

    if st.button("Calcular mi Perfil de Inversor"):
        if preguntas_respondidas:

            st.subheader("üéâ Resultado de tu Perfil de Inversor")
            st.metric("Puntuaci√≥n Total", puntaje_total)

            # L√≥gica de Clasificaci√≥n del Perfil (Basada en 7-35 puntos)
            if puntaje_total <= 15:
                perfil = "Conservador (Preservaci√≥n del Capital)üõ°Ô∏è"
                st.success(f"Tu perfil es: **{perfil}**")
                st.write("Tu prioridad es la seguridad. Se recomienda invertir en activos de Renta Fija y baja volatilidad.")
                st.session_state.perfil = "CONSERVADOR" # Initialize session state

            elif puntaje_total <= 25:
                perfil = "Moderado / Equilibrado (Crecimiento y Estabilidad) üåø"
                st.info(f"Tu perfil es: **{perfil}**")
                st.write("Buscas un balance. Se recomienda una cartera diversificada que combine renta fija y renta variable (Modelo Markowitz).")
                st.session_state.perfil = "MODERADO" # Initialize session state

            else: # puntaje_total > 25
                perfil = "Arriesgado / Crecimiento (M√°ximo Rendimiento) üî•"
                st.warning(f"Tu perfil es: **{perfil}**")
                st.write("Tienes una alta tolerancia al riesgo y conocimiento. Se recomienda enfocarse en la eficiencia del portafolio (Ratio de Sharpe).")
                st.session_state.perfil = "ARRIESGADO" # Initialize session state

        else:
            st.error("Por favor, responde todas las preguntas para obtener tu resultado.")

with tab2:
    st.header("üìà Simulaci√≥n de Portafolio y Resultados")
    st.markdown("---")

    if st.session_state.perfil is None:
        st.error("üõë Por favor, completa el **Cuestionario del Inversor** en la pesta√±a anterior para desbloquear la simulaci√≥n.")
    else:
        st.success(f"Perfil Actual: **{st.session_state.perfil}**. ¬°Configura tu simulaci√≥n!")

        st.subheader("Configuraci√≥n de Acciones")
        single_ticker = st.text_input(
            "Ingrese **un √∫nico Ticker** para an√°lisis individual (ej: AAPL)",
            value=""
        )

        today = datetime.date.today()
        three_years_ago = today - datetime.timedelta(days=3 * 365)

        st.header("Selector de rango de Fechas Hist√≥ricas")
        d = st.date_input(
            "Seleccione el per√≠odo hist√≥rico para el an√°lisis",
            value=(three_years_ago, today),
            min_value=datetime.date(1990, 1, 1),
            max_value=today,
            format="MM.DD.YYYY",
        )
        st.write("El rango seleccionado es:", d)

        # Define num_activos based on whether a single ticker is entered
        num_activos = 1 if single_ticker else 0

        if st.button("Analicemos esta acci√≥n!"):
            # Code to analyze the single ticker goes here
            # For now, I'll just add a placeholder
            st.write("Analyzing:", single_ticker)

        # Moved from Lwp8xErbI3SX
        # Mostrar el bot√≥n de simulaci√≥n solo si hay tickers ingresados
        if num_activos > 0:
            if st.button("Ejecutar Simulaci√≥n de Portafolio"):

                # Define get_data function
                def get_data(tickers, start_date, end_date, benchmark_ticker="^GSPC"):
                    """Downloads historical data for tickers and a benchmark."""
                    data = yf.download(tickers, start=start_date, end=end_date)['Close']
                    benchmark_data = yf.download(benchmark_ticker, start=start_date, end=end_date)['Adj Close']
                    return data, benchmark_data

                # Define calculate_beta function
                def calculate_beta(asset_returns, benchmark_returns):
                    """Calculates beta for each asset against the benchmark."""
                    betas = {}
                    for column in asset_returns.columns:
                        # Calculate covariance between asset and benchmark returns
                        covariance = asset_returns[column].cov(benchmark_returns.iloc[:, 0])
                        # Calculate variance of benchmark returns
                        benchmark_variance = benchmark_returns.iloc[:, 0].var()
                        # Calculate beta
                        beta = covariance / benchmark_variance
                        betas[column] = beta
                    return betas

                # Define MARKET_TICKER and RF
                MARKET_TICKER = "^GSPC" # S&P 500 as benchmark
                RF = 0.04 # Risk-Free Rate (example: 4%)


                # Descarga de datos
                try:
                    tickers = [single_ticker] # Use the single_ticker for analysis
                    start_date = d[0]
                    end_date = d[1]

                    datos, benchmark_data = get_data(tickers, start_date, end_date)

                    if datos.empty:
                        st.error("No se pudieron descargar los datos. Revise los s√≠mbolos de los tickers o el rango de fechas.")
                    else:
                        # C√ÅLCULOS B√ÅSICOS
                        retornos = datos.pct_change().dropna()
                        benchmark_retornos = benchmark_data.pct_change().dropna()

                        # Asegurar alineaci√≥n de retornos
                        retornos = pd.merge(retornos, benchmark_retornos, left_index=True, right_index=True, how='inner').drop(columns=[MARKET_TICKER])
                        benchmark_retornos = benchmark_retornos.loc[retornos.index]

                        retorno_anual = retornos.mean() * 252
                        volatilidad_anual = retornos.std() * np.sqrt(252)

                        # --- C√ÅLCULO CAPM ---
                        betas = calculate_beta(retornos, benchmark_retornos)
                        # Retorno del Mercado (Rm) anualizado
                        Rm = benchmark_retornos.mean().iloc[0] * 252

                        # Calcular Retorno Esperado por CAPM: E[Ri] = Rf + Beta * (Rm - Rf)
                        retorno_capm = {}
                        for t, beta in betas.items():
                            retorno_capm[t] = RF + beta * (Rm - RF)
                        retorno_capm_series = pd.Series(retorno_capm)

                        # Mostrar tabla de m√©tricas individuales
                        st.subheader("1. M√©tricas Individuales de Activos")

                        # C√°lculo del Ratio de Sharpe individual para la tabla
                        sharpe_anual = (retorno_anual - RF) / volatilidad_anual

                        metricas_df = pd.DataFrame({
                            'Retorno Anual Esperado (Hist√≥rico)': retorno_anual.apply(lambda x: f"{x*100:.2f}%"),
                            'Retorno Esperado (CAPM)': retorno_capm_series.apply(lambda x: f"{x*100:.2f}%"),
                            'Volatilidad Anual (Riesgo)': volatilidad_anual.apply(lambda x: f"{x*100:.2f}%"),
                            'Beta (vs. S&P 500)': pd.Series(betas).round(2),
                            'Ratio de Sharpe': sharpe_anual.round(2)
                        })

                        # Reindexar la tabla para asegurar que el orden de los Tickers sea el mismo
                        metricas_df = metricas_df.reindex(columns=['Retorno Anual Esperado (Hist√≥rico)', 'Retorno Esperado (CAPM)', 'Volatilidad Anual (Riesgo)', 'Beta (vs. S&P 500)', 'Ratio de Sharpe'])

                        st.dataframe(metricas_df)


                        st.subheader(f"2. An√°lisis del Portafolio (Basado en Perfil {st.session_state.perfil})")

                        if num_activos == 1:
                            # --- C√ÅLCULO PARA 1 ACCI√ìN ---
                            st.markdown("‚ö†Ô∏è **Solo se ingres√≥ 1 activo:** El 'portafolio' es la acci√≥n individual. No hay beneficios de diversificaci√≥n.")

                            retorno_p = retorno_anual.iloc[0]
                            volatilidad_p = volatilidad_anual.iloc[0]
                            sharpe_p = sharpe_anual.iloc[0]

                            col_ret, col_vol, col_sharpe = st.columns(3)

                            with col_ret:
                                st.metric("Retorno Esperado", f"{retorno_p*100:.2f}%")
                            with col_vol:
                                st.metric("Volatilidad (Riesgo)", f"{volatilidad_p*100:.2f}%")
                            with col_sharpe:
                                st.metric("Ratio de Sharpe", f"{sharpe_p:.2f}")

                            # Gr√°fico de precios hist√≥ricos para el an√°lisis individual
                            st.markdown("#### Evoluci√≥n Hist√≥rica de Precios")
                            # Para evitar el error de Streamlit si la descarga de datos devuelve una Serie,
                            # nos aseguramos de que sea un DataFrame con el nombre de columna.
                            if isinstance(datos, pd.Series):
                                datos = datos.to_frame(name=single_ticker)
                            st.line_chart(datos)


                except Exception as e:
                    st.error(f"Error during simulation: {e}")
